// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                   Int     @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String  @unique
  phone_number         String
  is_active            Boolean @default(true)
  is_creator           Boolean @default(false)
  activation_link      String  @unique
  hashed_password      String
  hashed_refresh_token String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model User {
  id                   Int           @id @default(autoincrement())
  first_name           String
  last_name            String
  brith_date           DateTime
  profile_img          String
  is_active            Boolean       @default(true)
  is_premium           Boolean       @default(false)
  hashed_refresh_token String?
  last_online          DateTime      @default(now())
  balance              Decimal       @default(0)
  slug                 String?        @unique
  address              Address[]
  phone_number         PhoneNumber[]
  email                Email[]
  payment              Payment[]
  product              Product[]
  otp                  Otp[]
  senderChats          Chat[]        @relation("senderChats")
  receiverChats        Chat[]        @relation("receiverChats")
  messages             Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Region {
  id       Int        @id @default(autoincrement())
  name     String
  district District[]
  address  Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("region")
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  region_id Int
  region    Region    @relation(fields: [region_id], references: [id])
  address   Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("district")
}

model Address {
  id          Int       @id @default(autoincrement())
  user_id     Int
  name        String
  lat         String
  long        String
  is_main     Boolean   @default(false)
  region_id   Int
  district_id Int
  address     String
  user        User      @relation(fields: [user_id], references: [id])
  region      Region    @relation(fields: [region_id], references: [id])
  district    District  @relation(fields: [district_id], references: [id])
  product     Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  model   Model[]
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brand")
}

model Model {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  brand_id Int
  brand    Brand     @relation(fields: [brand_id], references: [id])
  product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("model")
}

model Color {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("color")
}

model Currency {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  payment Payment[]
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currency")
}

model PhoneNumber {
  id           Int     @id @default(autoincrement())
  phone_number String  @unique
  user_id      Int
  is_main      Boolean @default(false)
  user         User    @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("phone_number")
}

model Email {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  user_id Int
  is_main Boolean @default(false)
  user    User    @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email")
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]

  @@map("payment_method")
}

model Payment {
  id                Int     @id @default(autoincrement())
  user_id           Int
  payment_method_id Int
  amount            Decimal
  currency_id       Int

  user           User          @relation(fields: [user_id], references: [id])
  payment_method PaymentMethod @relation(fields: [payment_method_id], references: [id])
  currency       Currency      @relation(fields: [currency_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}


enum isChecked {
  PENDING
  APPROVED
  REJECTED
}

model Product {
  id            Int            @id @default(autoincrement())
  title         String
  storage       Int
  ram           Int
  user_id       Int?
  brand_id      Int
  model_id      Int?
  other_model   String?
  color_id      Int
  price         Decimal
  currency_id   Int
  description   String
  year          String
  negotiable    Boolean
  condition     Boolean
  has_document  Boolean
  phone_number  String
  address_id    Int?
  slug          String?        @unique
  is_top        Boolean        @default(false)
  is_checked    isChecked      @default(PENDING)
  is_active     Boolean        @default(true)
  is_deleted    Boolean        @default(false)
  view_count    Int            @default(0)
  like_count    Int            @default(0)
  user          User?           @relation(fields: [user_id], references: [id])
  brand         Brand          @relation(fields: [brand_id], references: [id])
  model         Model?         @relation(fields: [model_id], references: [id])
  color         Color?         @relation(fields: [color_id], references: [id])
  currency      Currency       @relation(fields: [currency_id], references: [id])
  address       Address?        @relation(fields: [address_id], references: [id])
  product_image ProductImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_image")
}

model Otp {
  id           Int      @id @default(autoincrement())
  phone_number String
  code         String
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])
  expired_time DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otp")
}

model Chat {
  id       Int  @id @default(autoincrement())
  sender   User @relation("senderChats", fields: [senderId], references: [id])
  senderId Int

  receiver   User @relation("receiverChats", fields: [receiverId], references: [id])
  receiverId Int

  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([senderId, receiverId])
}

model Message {
  id       Int    @id @default(autoincrement())
  text     String
  sender   User   @relation(fields: [senderId], references: [id])
  senderId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
