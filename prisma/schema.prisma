// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                   Int     @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String  @unique
  phone_number         String
  is_active            Boolean @default(true)
  is_creator           Boolean @default(false)
  activation_link      String  @unique
  hashed_password      String
  hashed_refresh_token String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model User {
  id                   Int           @id @default(autoincrement())
  first_name           String
  last_name            String
  brith_date           DateTime
  profile_img          String
  is_active            Boolean       @default(true)
  is_premium           Boolean       @default(false)
  hashed_refresh_token String?
  last_online          DateTime      @default(now())
  balance              Decimal       @default(0)
  address              Address[]
  phone_number         PhoneNumber[]
  email                Email[]
  payment              Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Region {
  id       Int        @id @default(autoincrement())
  name     String
  district District[]
  address  Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("region")
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  region_id Int
  region    Region    @relation(fields: [region_id], references: [id])
  address   Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("district")
}

model Address {
  id          Int      @id @default(autoincrement())
  user_id     Int
  name        String
  lat         String
  long        String
  is_main     Boolean  @default(false)
  region_id   Int
  district_id Int
  address     String
  user        User     @relation(fields: [user_id], references: [id])
  region      Region   @relation(fields: [region_id], references: [id])
  district    District @relation(fields: [district_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Brand {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  model Model[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brand")
}

model Model {
  id       Int    @id @default(autoincrement())
  name     String @unique
  brand_id Int
  brand    Brand  @relation(fields: [brand_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("model")
}

model Color {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("color")
}

model Currency {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currency")
}

model PhoneNumber {
  id           Int     @id @default(autoincrement())
  phone_number String  @unique
  user_id      Int
  is_main      Boolean @default(false)
  user         User    @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("phone_number")
}

model Email {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  user_id Int
  is_main Boolean @default(false)
  user    User    @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email")
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]

  @@map("payment_method")
}

model Payment {
  id                Int     @id @default(autoincrement())
  user_id           Int
  payment_method_id Int
  amount            Decimal
  currency_id       Int

  user           User          @relation(fields: [user_id], references: [id])
  payment_method PaymentMethod @relation(fields: [payment_method_id], references: [id])
  currency       Currency      @relation(fields: [currency_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment")
}
